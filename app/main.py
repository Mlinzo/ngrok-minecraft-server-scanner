import config
from config import THREADS, SOCKET_RESPONSE_TIMEOUT, main_logger, DB_POOL_RELEASE_PERIOD
from utils import measure_execution_time
from mine_scanner import  check_target_sockets_t, check_ngrok_sockets_t
from db.controller import DBController, DBPool
import argparse
import sys

@measure_execution_time
def main(threads: int, load_from: str, timeout: int, gen_sockets: bool, output: str, pre_load_sockets: bool, db_sockets: bool):
    db = DBController()
    pool = DBPool(output_path=output)
    if output:
        main_logger.info(f'found servers will be dumped to {output} every {DB_POOL_RELEASE_PERIOD} seconds')
    if pre_load_sockets:
        db.load_ngrok_sockets()
        target_sockets = db.get_target_sockets()
        check_target_sockets_t(target_sockets, pool, threads, timeout)
    elif db_sockets:
        main_logger.info(f'using host:port from database where status is set to null')
        target_sockets = db.get_target_sockets()
        check_target_sockets_t(target_sockets, pool, threads, timeout)
    elif load_from:
        target_sockets = db.load_sockets_txt(load_from)
        main_logger.info(f'using host:port from file {load_from}')
        check_target_sockets_t(target_sockets, pool, threads, timeout)
    elif gen_sockets:
        main_logger.info(f'using autogenerated ngrok host:port')
        check_ngrok_sockets_t(pool, threads, timeout)

def parser_error(errmsg):
    print("Usage: python " + sys.argv[0] + " [Options] use -h for help")
    print("Error: " + errmsg)
    sys.exit()

def parse_args():
    parser = argparse.ArgumentParser(epilog='\tExample: \r\npython ' + sys.argv[0] + " --gen_sockets to generate ngrok host:port and start a scanner")
    parser.error = parser_error #type: ignore
    parser._optionals.title = "OPTIONS"
    parser.add_argument('-g', '--gen_sockets', help=f'Generate host:port for ngrok.io automatically', nargs='?', default=False)
    parser.add_argument('-d', '--db_sockets', help=f'Take host:port from database where status set to null', nargs='?', default=False)
    parser.add_argument('-p', '--pre_load_sockets', help=f'Generate host:port for ngrok.io automatically and load it to db with status is set to null', nargs='?', default=False)
    parser.add_argument('-t', '--threads', help=f'Number of threads to use for scanning (default - {THREADS})', type=int, default=THREADS, required=False)
    parser.add_argument('-l', '--load', help=f"Load host:port from txt file", type=str, default='', required=False)
    parser.add_argument('-o', '--output', help=f'Output result to txt file', type=str, default='', required=False)
    parser.add_argument('-tm', '--timeout', help=f'Timeout in seconds for socket response (default - {SOCKET_RESPONSE_TIMEOUT})', type=int, default=SOCKET_RESPONSE_TIMEOUT, required=False)
    return parser.parse_args()

def interactive():
    args = parse_args()
    threads: int = args.threads
    load_from: str = args.load
    timeout: int = args.timeout
    gen_sockets: bool = True if args.gen_sockets is None else False
    pre_load_sockets: bool = True if args.pre_load_sockets is None else False
    db_sockets: bool = True if args.db_sockets is None else False
    output: str = args.output
    if not gen_sockets and not load_from and not pre_load_sockets and not db_sockets:
        return main_logger.info('use python main.py -h to see help')
    main(threads, load_from, timeout, gen_sockets, output, pre_load_sockets, db_sockets)

if __name__ == '__main__':
    interactive()
